{"version":3,"sources":["components/Navbar.js","components/Alert.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","bgCol","color","document","body","style","backgroundColor","className","mode","href","hero","type","id","onClick","toggleMode","htmlFor","Alert","string","alert","role","margin","charAt","toUpperCase","substring","msg","Form","useState","text","updateText","title","onChange","event","console","log","target","value","height","newText","showAlert","toLowerCase","split","i","length","join","App","setMode","setAlert","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1c641007.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Navbar.css';\n\n// import { Link } from 'react-router-dom';\n\nexport default function Navbar(props) {\n  const bgCol = (color) => {\n    document.body.style.backgroundColor = color;\n  };\n  return (\n    <>\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`} style={{ backgroundColor: `${props.bgCol}` }}>\n        <div className='container-fluid'>\n          <a className='navbar-brand' href='#'>\n            {props.hero}\n          </a>\n          <button\n            className='navbar-toggler'\n            type='button'\n            data-bs-toggle='collapse'\n            data-bs-target='/navbarSupportedContent'\n            aria-controls='navbarSupportedContent'\n            aria-expanded='false'\n            aria-label='Toggle navigation'\n          >\n            <span className='navbar-toggler-icon'></span>\n          </button>\n          <div className='collapse navbar-collapse' id='navbarSupportedContent'>\n            <ul className='navbar-nav me-auto mb-2 mb-lg-0'>\n              <li className='nav-item'>\n                <a className='nav-link active' aria-current='page' href='#'>\n                  Home\n                </a>\n              </li>\n              {/* <li className='nav-item'>\n                <Link className='nav-link' to='/about'>\n                  About\n                </Link>\n              </li> */}\n            </ul>\n            {/* <form className='d-flex'>\n              <input className='form-control me-2' type='search' placeholder='Search' aria-label='Search' />\n              <button className='btn btn-outline-success' type='submit'>\n                Search\n              </button>\n            </form> */}\n          </div>\n          <div className='colorPalette'>\n            <div\n              className='options options__light'\n              onClick={() => {\n                bgCol('#ffffff');\n              }}\n            ></div>\n            <div\n              className='options options__grey'\n              onClick={() => {\n                bgCol('#636363');\n              }}\n            ></div>\n            <div\n              className='options options__green'\n              onClick={() => {\n                bgCol('#004509');\n              }}\n            ></div>\n            <div\n              className='options options__blue'\n              onClick={() => {\n                bgCol('#003599');\n              }}\n            ></div>\n            <div\n              className='options options__dark'\n              onClick={() => {\n                bgCol('#3f4650');\n              }}\n            ></div>\n          </div>\n          <div className='form-check form-switch'>\n            <input className='form-check-input' type='checkbox' id='flexSwitchCheckDefault' onClick={props.toggleMode} />\n            <label className={`form-check-label text-${props.mode === 'light' ? 'dark' : 'light'}`} htmlFor='flexSwitchCheckDefault'>\n              Dark Mode\n            </label>\n          </div>\n        </div>\n      </nav>\n    </>\n  );\n}\n\nNavbar.propTypes = {\n  hero: PropTypes.string,\n  link1: PropTypes.string,\n};\n","import React from 'react';\n\nfunction Alert(props) {\n\n  const capitalize = (string) => {\n    return string.charAt(0).toUpperCase() + string.substring(1);\n  };\n  return (\n    props.alert && (\n      <>\n        <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role='alert' style={{margin: '20px'}}>\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\n          <button type='button' className='btn-close' data-bs-dismiss='alert' aria-label='Close'></button>\n        </div>\n      </>\n    )\n  );\n}\n\nexport default Alert;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Form.css';\n\nexport default function Form(props) {\n  const [text, updateText] = useState('');\n\n  const upper = () => {\n    console.log('button clicked');\n    console.log({ text });\n    let newText = text.toUpperCase();\n    updateText(newText);\n    props.showAlert('success', 'Text converted to uppercase');\n  };\n\n  const lower = () => {\n    console.log('button clicked');\n    console.log({ text });\n    let newText = text.toLowerCase();\n    updateText(newText);\n    props.showAlert('success', 'Text converted to lowercase');\n\n  };\n\n  const upper1 = () => {\n    console.log('button clicked');\n    console.log({ text });\n    let newText = text.split(' ');\n    for (let i = 0; i < newText.length; i++) {\n      newText[i] = newText[i].charAt(0).toUpperCase() + newText[i].substring(1);\n    }\n    console.log(newText.join(' '));\n    updateText(newText.join(' '));\n    props.showAlert('success', 'first letter of word converted to uppercase');\n\n  };\n\n  const clear = () => {\n    updateText('');\n    props.showAlert('success', 'Text cleared');\n\n  };\n\n  const change = (event) => {\n    console.log('changed');\n    updateText(event.target.value);\n  };\n\n  return (\n    <>\n      <div className='container'>\n        <div className='container my-3'>\n          <h1>{props.title}</h1>\n          <textarea className='form-control' id='floatingTextarea2' onChange={change} value={text} style={{ height: '100px' }}></textarea>\n          <button className='btn btn-primary m-3' onClick={upper}>\n            upper\n          </button>\n          <button className='btn btn-primary m-3' onClick={lower}>\n            lower\n          </button>\n          <button className='btn btn-primary m-3' onClick={upper1}>\n            upper 1st char\n          </button>\n          <button className='btn btn-primary m-3' onClick={clear}>\n            clear\n          </button>\n        </div>\n\n        <div className='container'>\n          <h1>Summary</h1>\n          <p>\n            {text.split(' ').length - 1} words, {text.length} characters\n          </p>\n          <p>time to each read = {(text.split(' ').length - 1) * 0.9}</p>\n        </div>\n      </div>\n    </>\n  );\n}\n\nForm.propTypes = {\n  title: PropTypes.string,\n};\n","import './App.css';\n\nimport { useState } from 'react';\n// import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport Navbar from './components/Navbar';\nimport Alert from './components/Alert';\nimport Form from './components/Form';\n// import About from './components/About.js';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (type, message) => {\n    setAlert({\n      type: type,\n      msg: message,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      showAlert('success', 'DarkMode');\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      showAlert('success', 'LightMode');\n    }\n  };\n\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar hero='react' mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        {/* <Switch> */}\n          {/* <Route exact path='/about'>\n            <About />\n          </Route> */}\n          {/* <Route exact path='/'> */}\n            <Form title='Enter' showAlert={showAlert} />\n          {/* </Route> */}\n        {/* </Switch> */}\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}